[{"/Users/andreww/seir/project_3/front-end/src/reportWebVitals.js":"1","/Users/andreww/seir/project_3/front-end/src/App.js":"2","/Users/andreww/seir/project_3/front-end/src/Components/Index/Index.js":"3","/Users/andreww/seir/project_3/front-end/src/Components/Movies/Movies.js":"4","/Users/andreww/seir/project_3/front-end/src/index.js":"5","/Users/andreww/seir/project_3/front-end/src/Components/Favorites/Favorites.js":"6","/Users/andreww/seir/project_3/front-end/src/Components/Favorites/Note/Note.js":"7","/Users/andreww/seir/project_3/front-end/src/ignorethis.js":"8"},{"size":362,"mtime":1609172359221,"results":"9","hashOfConfig":"10"},{"size":943,"mtime":1609444206008,"results":"11","hashOfConfig":"10"},{"size":1017,"mtime":1609442374272,"results":"12","hashOfConfig":"10"},{"size":5387,"mtime":1609444269436,"results":"13","hashOfConfig":"10"},{"size":589,"mtime":1609265223598,"results":"14","hashOfConfig":"10"},{"size":4877,"mtime":1609958517724,"results":"15","hashOfConfig":"10"},{"size":1566,"mtime":1609958598710,"results":"16","hashOfConfig":"10"},{"size":51,"mtime":1609444170749,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"159ktod",{"filePath":"20","messages":"21","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/andreww/seir/project_3/front-end/src/reportWebVitals.js",[],"/Users/andreww/seir/project_3/front-end/src/App.js",["37","38","39","40"],"/Users/andreww/seir/project_3/front-end/src/Components/Index/Index.js",["41","42","43","44"],"/Users/andreww/seir/project_3/front-end/src/Components/Movies/Movies.js",["45","46","47"],"import { useState, useEffect, useRef } from 'react';\nimport React from 'react'\nimport apiKey from '../../ignorethis.js'\n\nconst Movies = () => {\n    // React states\n    // for populating\n    const [movieSearch, setMovieSearch] = useState([]);\n    const [movieInfo, setMovieInfo] = useState([]);\n    // const [moviePoster, setMoviePoster] = useState([]);\n    const [movieTitle, setMovieTitle] = useState([]);\n    const [movieYear, setMovieYear] = useState([]);\n\n    // Use ref\n    const noteInput = useRef(null);\n\n    // Retrieve individual movie information from API\n    const getMovieInfo = async (idHolder) => {\n        let movieInfoArr = [];\n        for (let i = 0; i < idHolder.length; i++) {\n            let movieID = idHolder[i];\n            try {\n                // variable to hold our endpoint\n                const apiEndpoint = `http://www.omdbapi.com/?i=${movieID}&apikey=${apiKey}`;\n                // store response from fetch request in a variable\n                const response = await fetch(apiEndpoint);\n                // parse the json from the response object\n                const data = await response.json();\n                let addMovieInfo = data;\n                movieInfoArr.push(addMovieInfo);\n              } catch {\n                console.log(\"Failed to retrieve data\")\n              }\n        }\n        setMovieInfo(movieInfoArr);\n    }\n\n    // Search API for movie title and year\n    const searchForMovies = async () => {\n        try {\n          // variable to hold our endpoint\n          const apiEndpoint = `http://www.omdbapi.com/?s=${movieTitle}&y=${movieYear}&type=movie&apikey=${apiKey}`;\n          // store response from fetch request in a variable\n          const response = await fetch(apiEndpoint);\n          // parse the json from the response object\n          const data = await response.json();\n          setMovieSearch(data);\n          let idHolder = data.Search.map ((e) => {\n              return e.imdbID;\n          })\n          getMovieInfo(idHolder);\n        } catch {\n          console.log(\"Failed to retrieve data\")\n        }\n    }\n\n    const handleSubmit = async (e) => {\n        // prevent a refresh\n        e.preventDefault();\n        setMovieInfo([]);\n        searchForMovies();\n    }\n\n    const handleFavoriteSubmit = async (e, id) => {\n        e.preventDefault();\n        // let noteHolder = noteInput.current.value;\n        let imdbID = id;\n        let newFavorite = JSON.stringify({\n            imdbID: imdbID,\n            note: \"\"\n        });\n        e.currentTarget.reset();\n        console.log(newFavorite);\n        try {\n            const response = await fetch('http://localhost:3001/favorites', {\n                method: 'POST',\n                headers: {\n                    'Content-type' : 'application/json'\n                },\n                body: newFavorite\n            });\n            const data = await response.json();\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    // Use effect necessary stuff\n    useEffect(() => {\n        console.log(\"use effect\")\n    }, []);\n\n    return (\n        <div>\n            <div className='movie-search-section'>\n                <h2>Search for a movie!</h2>\n                <p>Only the title is required, the year can just help you find a specific movie.</p>\n                <form onSubmit={handleSubmit}>\n                    <label htmlFor=\"title\">Title</label>\n                    <input type=\"text\" id=\"title\" className=\"movie-search-input\" value={movieTitle} onChange={(e) => setMovieTitle(e.target.value)}/>\n                    <label htmlFor=\"year\">Year</label>\n                    <input type=\"number\" id=\"year\" className=\"movie-search-input\" value={movieYear} onChange={(e) => setMovieYear(e.target.value)}/>\n                    <input type=\"submit\" value=\"Search\" className=\"movie-search-button\"/>\n                </form>\n            </div>\n            <ul>\n            {\n                movieInfo.map((e) => {\n                    return (\n                        <div className=\"movies-search-results\">\n                            <p>{e.Title} ({e.Year})</p>\n                            <img src={`${e.Poster}`} alt={e.Title}/>\n                            <form onSubmit={\n                                (evt) => {\n                                    handleFavoriteSubmit(evt, e.imdbID);\n                                }\n                            } className=\"movies-note-form\">\n                                <input type=\"submit\" value=\"Add to Favorites\" className=\"movie-note-button\"/>\n                            </form>\n                            <div className=\"subinfo-for-movies\">\n                                <li key={`director-${e.imdbID}`}><span className=\"subinfo-for-movies-header\">Director</span>: {e.Director}</li>\n                                <li key={`country-${e.imdbID}`}><span className=\"subinfo-for-movies-header\">Country</span>: {e.Country}</li>\n                                <li key={`awards-${e.imdbID}`}><span className=\"subinfo-for-movies-header\">Awards</span>: {e.Awards}</li>\n                                <li key={`genre-${e.imdbID}`}><span className=\"subinfo-for-movies-header\">Genre</span>: {e.Genre}</li>\n                            </div>\n                        </div>\n                    )\n                })\n            }\n            </ul>\n        </div>\n    )\n}\n\nexport default Movies","/Users/andreww/seir/project_3/front-end/src/index.js",[],["48","49"],"/Users/andreww/seir/project_3/front-end/src/Components/Favorites/Favorites.js",["50","51","52","53"],"import React from 'react'\nimport { useState, useEffect, useRef } from 'react';\nimport apiKey from '../../ignorethis.js'\nimport Note from './Note/Note.js'\nrequire('dotenv').config();\n\nconst Favorites = () => {\n    // favorites has the imdbID's and notes for each movie\n    const [favorites, setFavorites] = useState([]);\n    // movieInfo has the actual JSON file from the api for each movie\n    const [movieInfo, setMovieInfo] = useState([]);\n    const [notes, setNotes] = useState([]);\n\n    const favoriteNote = useRef(null);\n    const localApiEndPoint = 'https://project-3-moviefinder.herokuapp.com/api/favorites';\n\n    const getMovieFromMovieAPI = async (idHolder) => {\n        let movieInfoArr =[];\n        for (let i = 0; i < idHolder.length; i++) {\n            let movieId = idHolder[i].imdbID;\n            try {\n                // variable to hold our endpoint\n                const apiEndpoint = `http://www.omdbapi.com/?i=${movieId}&apikey=${apiKey}`;\n                // store response from fetch request in a variable\n                const response = await fetch(apiEndpoint);\n                // parse the json from the response object\n                const data = await response.json();\n                let addMovieInfo = data;\n                addMovieInfo._id = idHolder[i]._id;\n                addMovieInfo.note = idHolder[i].note;\n                movieInfoArr.push(addMovieInfo);\n                console.log(addMovieInfo);\n                } catch {\n                console.log(\"Failed to retrieve data\")\n            }\n        }\n        setMovieInfo(movieInfoArr);\n        console.log(movieInfo);\n    }\n\n    const getMovieFromLocalAPI = async () => {\n        console.log(apiKey);\n        try {\n            // variable to hold our endpoint\n            const apiEndpoint = localApiEndPoint;\n            // store response from fetch request in a variable\n            const response = await fetch(apiEndpoint);\n            // parse the json from the response object\n            const data = await response.json();\n            setFavorites(data)\n            getMovieFromMovieAPI(data);\n            console.log({data})\n            } catch {\n            console.log(\"Failed to retrieve data\")\n        }\n    }\n\n    const removeMovieFromFavorites = async (dbID, imdbID, e) => {\n        e.preventDefault();\n        try {\n          const response = await fetch (`${localApiEndPoint}/${dbID}`, {\n            method: 'DELETE',\n            headers: {\n              'Content-type': 'application/json'\n            }\n          })\n          // line below is what shows up\n          const data = await response.json();\n          const filteredMovies = movieInfo.filter (x => x.dbID !== data.dbID)\n          setMovieInfo(filteredMovies);\n        } catch (error) {\n          console.error(error);\n        }\n    }\n\n    useEffect(() => {\n        console.log(\"use effect\")\n        getMovieFromLocalAPI();\n    }, []);\n    \n    return (\n        <div>\n            <h2 className=\"header-for-favorites\">Favorites Page</h2>\n            {\n                movieInfo.map((e, mapIndex) => {\n                    return (\n                        <div className=\"movies-search-results\">\n                            <p>{e.Title} ({e.Year})</p>\n                            <img src={`${e.Poster}`} alt={e.Title}/>\n                            <button onClick={\n                                (evt) => {\n                                    removeMovieFromFavorites(e._id, e.imdbID, evt)\n                                }\n                            }>Remove from favorites</button>\n                            <Note\n                                mapIndex={mapIndex}\n                                e={e}\n                                getMovieFromLocalAPI={getMovieFromLocalAPI}\n                                setMovieInfo={setMovieInfo}\n                                movieInfo={movieInfo}\n                                favorites={favorites}\n                            />\n                            <div className=\"subinfo-for-movies\">\n                                <li key={`note-${e.imdbID}`}><span className=\"subinfo-for-movies-header\">Note</span>: {e.note}</li>\n                                <li key={`director-${e.imdbID}`}><span className=\"subinfo-for-movies-header\">Director</span>: {e.Director}</li>\n                                <li key={`country-${e.imdbID}`}><span className=\"subinfo-for-movies-header\">Country</span>: {e.Country}</li>\n                                <li key={`awards-${e.imdbID}`}><span className=\"subinfo-for-movies-header\">Awards</span>: {e.Awards}</li>\n                                <li key={`genre-${e.imdbID}`}><span className=\"subinfo-for-movies-header\">Genre</span>: {e.Genre}</li>\n                            </div>\n                        </div>\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nexport default Favorites","/Users/andreww/seir/project_3/front-end/src/Components/Favorites/Note/Note.js",["54","55"],"/Users/andreww/seir/project_3/front-end/src/ignorethis.js",[],{"ruleId":"56","severity":1,"message":"57","line":1,"column":10,"nodeType":"58","messageId":"59","endLine":1,"endColumn":18},{"ruleId":"56","severity":1,"message":"60","line":1,"column":20,"nodeType":"58","messageId":"59","endLine":1,"endColumn":29},{"ruleId":"56","severity":1,"message":"61","line":1,"column":31,"nodeType":"58","messageId":"59","endLine":1,"endColumn":37},{"ruleId":"56","severity":1,"message":"62","line":3,"column":8,"nodeType":"58","messageId":"59","endLine":3,"endColumn":14},{"ruleId":"56","severity":1,"message":"63","line":2,"column":10,"nodeType":"58","messageId":"59","endLine":2,"endColumn":15},{"ruleId":"56","severity":1,"message":"64","line":2,"column":17,"nodeType":"58","messageId":"59","endLine":2,"endColumn":21},{"ruleId":"56","severity":1,"message":"65","line":2,"column":23,"nodeType":"58","messageId":"59","endLine":2,"endColumn":29},{"ruleId":"66","severity":1,"message":"67","line":8,"column":14,"nodeType":"68","endLine":8,"endColumn":58},{"ruleId":"56","severity":1,"message":"69","line":8,"column":12,"nodeType":"58","messageId":"59","endLine":8,"endColumn":23},{"ruleId":"56","severity":1,"message":"70","line":15,"column":11,"nodeType":"58","messageId":"59","endLine":15,"endColumn":20},{"ruleId":"56","severity":1,"message":"71","line":82,"column":19,"nodeType":"58","messageId":"59","endLine":82,"endColumn":23},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"56","severity":1,"message":"76","line":12,"column":12,"nodeType":"58","messageId":"59","endLine":12,"endColumn":17},{"ruleId":"56","severity":1,"message":"77","line":12,"column":19,"nodeType":"58","messageId":"59","endLine":12,"endColumn":27},{"ruleId":"56","severity":1,"message":"78","line":14,"column":11,"nodeType":"58","messageId":"59","endLine":14,"endColumn":23},{"ruleId":"79","severity":1,"message":"80","line":79,"column":8,"nodeType":"81","endLine":79,"endColumn":10,"suggestions":"82"},{"ruleId":"56","severity":1,"message":"60","line":1,"column":20,"nodeType":"58","messageId":"59","endLine":1,"endColumn":29},{"ruleId":"56","severity":1,"message":"61","line":1,"column":31,"nodeType":"58","messageId":"59","endLine":1,"endColumn":37},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useRef' is defined but never used.","'apiKey' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'Switch' is defined but never used.","jsx-a11y/no-distracting-elements","Do not use <marquee> elements as they can create visual accessibility issues and are deprecated.","JSXOpeningElement","'movieSearch' is assigned a value but never used.","'noteInput' is assigned a value but never used.","'data' is assigned a value but never used.","no-native-reassign",["83"],"no-negated-in-lhs",["84"],"'notes' is assigned a value but never used.","'setNotes' is assigned a value but never used.","'favoriteNote' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMovieFromLocalAPI'. Either include it or remove the dependency array.","ArrayExpression",["85"],"no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},"Update the dependencies array to be: [getMovieFromLocalAPI]",{"range":"88","text":"89"},[2900,2902],"[getMovieFromLocalAPI]"]