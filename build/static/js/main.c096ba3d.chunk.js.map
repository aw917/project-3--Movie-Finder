{"version":3,"sources":["ignorethis.js","Components/Index/Index.js","Components/Movies/Movies.js","Components/Favorites/Note/Note.js","Components/Favorites/Favorites.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Index","src","alt","className","behavior","direction","Movies","useState","setMovieSearch","movieInfo","setMovieInfo","movieTitle","setMovieTitle","movieYear","setMovieYear","getMovieInfo","useRef","idHolder","a","movieInfoArr","i","length","movieID","apiEndpoint","apiKey","fetch","response","json","data","addMovieInfo","push","console","log","searchForMovies","Search","map","e","imdbID","handleSubmit","preventDefault","handleFavoriteSubmit","id","newFavorite","JSON","stringify","note","currentTarget","reset","method","headers","body","error","useEffect","onSubmit","htmlFor","type","value","onChange","target","Title","Year","Poster","evt","Director","Country","Awards","Genre","Note","mapIndex","getMovieFromLocalAPI","favorites","inputValue","setInputValue","handleNoteUpdate","dbID","inputNoteValue","_id","require","config","Favorites","setFavorites","getMovieFromMovieAPI","movieId","removeMovieFromFavorites","filteredMovies","filter","x","onClick","App","to","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c096ba3d.chunk.js","sourcesContent":["const apiKey = '3b12114f';\nmodule.exports = apiKey;","import React from 'react'\nimport { Route, Link, Switch } from 'react-router-dom';\n\nconst Index = () => {\n    return (\n        <div>\n             <img src=\"https://images.unsplash.com/photo-1486395130845-ec128138002e?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80\" alt=\"ominous lightbulbs\" className=\"lightbulb-main\"/>\n             <marquee behavior=\"scroll\" direction=\"left\">movies can be...enlightening!</marquee>\n            <div className=\"index-description\">\n                <h2>Welcome to movie finder!</h2>\n                <p>Movie finder specializes in a simple way to find movies and add them to a list of favorites that you can watch later!\n                Go to the 'Movie Finder' page to find fun movies to watch!  See something you like?  Add it to your favorites with a note. \n                You will be able to edit these notes at any time!\n                <br/><br/>Happy viewing!</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Index","import { useState, useEffect, useRef } from 'react';\nimport React from 'react'\nimport apiKey from '../../ignorethis.js'\n\nconst Movies = () => {\n    // React states\n    // for populating\n    const [movieSearch, setMovieSearch] = useState([]);\n    const [movieInfo, setMovieInfo] = useState([]);\n    // const [moviePoster, setMoviePoster] = useState([]);\n    const [movieTitle, setMovieTitle] = useState([]);\n    const [movieYear, setMovieYear] = useState([]);\n\n    // Use ref\n    const noteInput = useRef(null);\n\n    // Retrieve individual movie information from API\n    const getMovieInfo = async (idHolder) => {\n        let movieInfoArr = [];\n        for (let i = 0; i < idHolder.length; i++) {\n            let movieID = idHolder[i];\n            try {\n                // variable to hold our endpoint\n                const apiEndpoint = `http://www.omdbapi.com/?i=${movieID}&apikey=${apiKey}`;\n                // store response from fetch request in a variable\n                const response = await fetch(apiEndpoint);\n                // parse the json from the response object\n                const data = await response.json();\n                let addMovieInfo = data;\n                movieInfoArr.push(addMovieInfo);\n              } catch {\n                console.log(\"Failed to retrieve data\")\n              }\n        }\n        setMovieInfo(movieInfoArr);\n    }\n\n    // Search API for movie title and year\n    const searchForMovies = async () => {\n        try {\n          // variable to hold our endpoint\n          const apiEndpoint = `http://www.omdbapi.com/?s=${movieTitle}&y=${movieYear}&type=movie&apikey=${apiKey}`;\n          // store response from fetch request in a variable\n          const response = await fetch(apiEndpoint);\n          // parse the json from the response object\n          const data = await response.json();\n          setMovieSearch(data);\n          let idHolder = data.Search.map ((e) => {\n              return e.imdbID;\n          })\n          getMovieInfo(idHolder);\n        } catch {\n          console.log(\"Failed to retrieve data\")\n        }\n    }\n\n    const handleSubmit = async (e) => {\n        // prevent a refresh\n        e.preventDefault();\n        setMovieInfo([]);\n        searchForMovies();\n    }\n\n    const handleFavoriteSubmit = async (e, id) => {\n        e.preventDefault();\n        // let noteHolder = noteInput.current.value;\n        let imdbID = id;\n        let newFavorite = JSON.stringify({\n            imdbID: imdbID,\n            note: \"\"\n        });\n        e.currentTarget.reset();\n        console.log(newFavorite);\n        try {\n            const response = await fetch('http://localhost:3001/favorites', {\n                method: 'POST',\n                headers: {\n                    'Content-type' : 'application/json'\n                },\n                body: newFavorite\n            });\n            const data = await response.json();\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    // Use effect necessary stuff\n    useEffect(() => {\n        console.log(\"use effect\")\n    }, []);\n\n    return (\n        <div>\n            <div className='movie-search-section'>\n                <h2>Search for a movie!</h2>\n                <p>Only the title is required, the year can just help you find a specific movie.</p>\n                <form onSubmit={handleSubmit}>\n                    <label htmlFor=\"title\">Title</label>\n                    <input type=\"text\" id=\"title\" className=\"movie-search-input\" value={movieTitle} onChange={(e) => setMovieTitle(e.target.value)}/>\n                    <label htmlFor=\"year\">Year</label>\n                    <input type=\"number\" id=\"year\" className=\"movie-search-input\" value={movieYear} onChange={(e) => setMovieYear(e.target.value)}/>\n                    <input type=\"submit\" value=\"Search\" className=\"movie-search-button\"/>\n                </form>\n            </div>\n            <ul>\n            {\n                movieInfo.map((e) => {\n                    return (\n                        <div className=\"movies-search-results\">\n                            <p>{e.Title} ({e.Year})</p>\n                            <img src={`${e.Poster}`} alt={e.Title}/>\n                            <form onSubmit={\n                                (evt) => {\n                                    handleFavoriteSubmit(evt, e.imdbID);\n                                }\n                            } className=\"movies-note-form\">\n                                <input type=\"submit\" value=\"Add to Favorites\" className=\"movie-note-button\"/>\n                            </form>\n                            <div className=\"subinfo-for-movies\">\n                                <li key={`director-${e.imdbID}`}><span className=\"subinfo-for-movies-header\">Director</span>: {e.Director}</li>\n                                <li key={`country-${e.imdbID}`}><span className=\"subinfo-for-movies-header\">Country</span>: {e.Country}</li>\n                                <li key={`awards-${e.imdbID}`}><span className=\"subinfo-for-movies-header\">Awards</span>: {e.Awards}</li>\n                                <li key={`genre-${e.imdbID}`}><span className=\"subinfo-for-movies-header\">Genre</span>: {e.Genre}</li>\n                            </div>\n                        </div>\n                    )\n                })\n            }\n            </ul>\n        </div>\n    )\n}\n\nexport default Movies","import { useState, useEffect, useRef } from 'react';\n\nconst Note = ({mapIndex, e, getMovieFromLocalAPI, setMovieInfo, favorites, movieInfo}) => {\n    \n    const [inputValue, setInputValue] = useState(\"\");\n\n    const handleNoteUpdate = async (dbID, imdbID, evt, mapIndex) => {\n        evt.preventDefault();\n        console.log(inputValue);\n        try {\n            let inputNoteValue = {\n                note: inputValue\n            };\n            let body = JSON.stringify(inputNoteValue);\n            console.log(body);\n            const response = await fetch (`http://localhost:3001/favorites/${dbID}`, {\n              method: 'PUT',\n              headers: {\n                'Content-type': 'application/json'\n              },\n              body: body\n            })\n            const data = await response.json();\n            console.log(data);\n            getMovieFromLocalAPI();\n          } catch (error) {\n            console.error(error);\n          }\n    }\n\n    return (\n        <form onSubmit={\n            (evt) => {\n                handleNoteUpdate(e._id, e.imdbID, evt, mapIndex);\n            }\n        } className=\"movies-note-form\">\n            <input type=\"text\" className=\"movie-note-input\" value={inputValue} onChange={\n                (evt) => {\n                    setInputValue(evt.target.value)\n                }\n            }/>\n            <input type=\"submit\" value=\"Update Note\" className=\"update-movie-note-button\"/>\n        </form>\n    )\n}\n\nexport default Note;","import React from 'react'\nimport { useState, useEffect, useRef } from 'react';\nimport apiKey from '../../ignorethis.js'\nimport Note from './Note/Note.js'\nrequire('dotenv').config();\n\nconst Favorites = () => {\n    // favorites has the imdbID's and notes for each movie\n    const [favorites, setFavorites] = useState([]);\n    // movieInfo has the actual JSON file from the api for each movie\n    const [movieInfo, setMovieInfo] = useState([]);\n    const [notes, setNotes] = useState([]);\n\n    const favoriteNote = useRef(null);\n\n    const getMovieFromMovieAPI = async (idHolder) => {\n        let movieInfoArr =[];\n        for (let i = 0; i < idHolder.length; i++) {\n            let movieId = idHolder[i].imdbID;\n            try {\n                // variable to hold our endpoint\n                const apiEndpoint = `http://www.omdbapi.com/?i=${movieId}&apikey=${apiKey}`;\n                // store response from fetch request in a variable\n                const response = await fetch(apiEndpoint);\n                // parse the json from the response object\n                const data = await response.json();\n                let addMovieInfo = data;\n                addMovieInfo._id = idHolder[i]._id;\n                addMovieInfo.note = idHolder[i].note;\n                movieInfoArr.push(addMovieInfo);\n                console.log(addMovieInfo);\n                } catch {\n                console.log(\"Failed to retrieve data\")\n            }\n        }\n        setMovieInfo(movieInfoArr);\n        console.log(movieInfo);\n    }\n\n    const getMovieFromLocalAPI = async () => {\n        console.log(apiKey);\n        try {\n            // variable to hold our endpoint\n            const apiEndpoint = `http://localhost:3001/favorites/`;\n            // store response from fetch request in a variable\n            const response = await fetch(apiEndpoint);\n            // parse the json from the response object\n            const data = await response.json();\n            setFavorites(data)\n            getMovieFromMovieAPI(data);\n            console.log({data})\n            } catch {\n            console.log(\"Failed to retrieve data\")\n        }\n    }\n\n    const removeMovieFromFavorites = async (dbID, imdbID, e) => {\n        e.preventDefault();\n        try {\n          const response = await fetch (`http://localhost:3001/favorites/${dbID}`, {\n            method: 'DELETE',\n            headers: {\n              'Content-type': 'application/json'\n            }\n          })\n          // line below is what shows up\n          const data = await response.json();\n          const filteredMovies = movieInfo.filter (x => x.dbID !== data.dbID)\n          setMovieInfo(filteredMovies);\n        } catch (error) {\n          console.error(error);\n        }\n    }\n\n    useEffect(() => {\n        console.log(\"use effect\")\n        getMovieFromLocalAPI();\n    }, []);\n    \n    return (\n        <div>\n            <h2 className=\"header-for-favorites\">Favorites Page</h2>\n            {\n                movieInfo.map((e, mapIndex) => {\n                    return (\n                        <div className=\"movies-search-results\">\n                            <p>{e.Title} ({e.Year})</p>\n                            <img src={`${e.Poster}`} alt={e.Title}/>\n                            <button onClick={\n                                (evt) => {\n                                    removeMovieFromFavorites(e._id, e.imdbID, evt)\n                                }\n                            }>Remove from favorites</button>\n                            <Note\n                                mapIndex={mapIndex}\n                                e={e}\n                                getMovieFromLocalAPI={getMovieFromLocalAPI}\n                                setMovieInfo={setMovieInfo}\n                                movieInfo={movieInfo}\n                                favorites={favorites}\n                            />\n                            <div className=\"subinfo-for-movies\">\n                                <li key={`note-${e.imdbID}`}><span className=\"subinfo-for-movies-header\">Note</span>: {e.note}</li>\n                                <li key={`director-${e.imdbID}`}><span className=\"subinfo-for-movies-header\">Director</span>: {e.Director}</li>\n                                <li key={`country-${e.imdbID}`}><span className=\"subinfo-for-movies-header\">Country</span>: {e.Country}</li>\n                                <li key={`awards-${e.imdbID}`}><span className=\"subinfo-for-movies-header\">Awards</span>: {e.Awards}</li>\n                                <li key={`genre-${e.imdbID}`}><span className=\"subinfo-for-movies-header\">Genre</span>: {e.Genre}</li>\n                            </div>\n                        </div>\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nexport default Favorites","import { useState, useEffect, useRef } from 'react';\nimport { Route, Link, Switch } from 'react-router-dom';\nimport apiKey from './ignorethis';\nimport './App.css';\nimport Index from './Components/Index/Index.js'\nimport Movies from './Components/Movies/Movies.js'\nimport Favorites from './Components/Favorites/Favorites.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <title>Movie Finder</title>\n      <nav>\n        <div className=\"nav-links\">\n          <Link className=\"nav-links-for-css\" to ='/'>Home</Link>\n          <Link className=\"nav-links-for-css\" to ='/movies'>Movie Finder</Link>\n          <Link className=\"nav-links-for-css\" to ='/favorites'>Favorites</Link>\n        </div>\n      </nav>\n      <Switch>\n        <Route exact path='/' component={Index} />\n        <Route path='/movies' component={Movies}/>\n        <Route path='/Favorites' component={Favorites}/>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}